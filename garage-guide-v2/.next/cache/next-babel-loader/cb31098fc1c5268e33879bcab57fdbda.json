{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport callback from '../pages/callback';\nimport Cookies from 'js-cookie';\n\nvar Auth0 =\n/*#__PURE__*/\nfunction () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'mannycortez.auth0.com',\n      clientID: 'EUjD13m9xe4NZ9RTApKLbjcgyn5KPlXm',\n      redirectUri: 'http://localhost:4000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n            console.log(err);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Sets the time that the Access Token will expire at\n      var expiresAt = _JSON$stringify((authResult.expiresIn = 1000) + new Date().getTime()); // localStorage.setItem('access_token', authResult.accessToken);\n\n\n      Cookies.set('user', authResult.idTokenPayload);\n      Cookies.set('jwt', authResult.idToken);\n      Cookies.set('expiresAt', expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n      this.auth0.logout({\n        returnTo: '/',\n        clientID: 'EUjD13m9xe4NZ9RTApKLbjcgyn5KPlXm'\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiration time\n      var expiresAt = Cookies.getJSON('expiresAt');\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["/Users/mannycortez/React Projects/Garage-Guide/garage-guide-v2/services/auth0.js"],"names":["auth0","callback","Cookies","Auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","console","log","expiresAt","expiresIn","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJSON","auth0Client"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAEMC,K;;;AACJ,mBAAc;AAAA;;AACZ,SAAKH,KAAL,GAAa,IAAIA,KAAK,CAACI,OAAV,CAAkB;AAC3BC,MAAAA,MAAM,EAAE,uBADmB;AAE3BC,MAAAA,QAAQ,EAAE,kCAFiB;AAG3BC,MAAAA,WAAW,EAAE,gCAHc;AAI3BC,MAAAA,YAAY,EAAE,gBAJa;AAK3BC,MAAAA,KAAK,EAAE;AALoB,KAAlB,CAAb;AAOA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACD;;;;2CAEsB;AAAA;;AACrB,aAAO,aAAY,UAAEI,OAAF,EAAWC,MAAX,EAAuB;AACxC,QAAA,KAAI,CAAChB,KAAL,CAAWiB,SAAX,CAAqB,UAAEC,GAAF,EAAOC,UAAP,EAAuB;AAC1C,cAAGA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAtD,EAA+D;AAC7D,YAAA,KAAI,CAACC,UAAL,CAAgBH,UAAhB;;AACAJ,YAAAA,OAAO;AACR,WAHD,MAGO,IAAIG,GAAJ,EAAS;AACdF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACAK,YAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD;AACF,SARD;AASD,OAVM,CAAP;AAWD;;;+BAEUC,U,EAAY;AACrB;AACA,UAAMM,SAAS,GAAG,gBAAe,CAACN,UAAU,CAACO,SAAX,GAAuB,IAAxB,IAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAlB,CAFqB,CAIrB;;;AACA1B,MAAAA,OAAO,CAAC2B,GAAR,CAAY,MAAZ,EAAoBV,UAAU,CAACW,cAA/B;AACA5B,MAAAA,OAAO,CAAC2B,GAAR,CAAY,KAAZ,EAAmBV,UAAU,CAACE,OAA9B;AACAnB,MAAAA,OAAO,CAAC2B,GAAR,CAAY,WAAZ,EAAyBJ,SAAzB;AACD;;;6BAEU;AACPvB,MAAAA,OAAO,CAAC6B,MAAR,CAAe,MAAf;AACA7B,MAAAA,OAAO,CAAC6B,MAAR,CAAe,KAAf;AACA7B,MAAAA,OAAO,CAAC6B,MAAR,CAAe,WAAf;AAEA,WAAK/B,KAAL,CAAWY,MAAX,CAAmB;AACjBoB,QAAAA,QAAQ,EAAE,GADO;AAEjB1B,QAAAA,QAAQ,EAAE;AAFO,OAAnB;AAID;;;4BACO;AACJ,WAAKN,KAAL,CAAWiC,SAAX;AACH;;;sCACiB;AAChB;AACA;AACA,UAAMR,SAAS,GAAGvB,OAAO,CAACgC,OAAR,CAAgB,WAAhB,CAAlB;AACA,aAAO,IAAIP,IAAJ,GAAWC,OAAX,KAAuBH,SAA9B;AACD;;;;;;AAGL,IAAMU,WAAW,GAAG,IAAIhC,KAAJ,EAApB;AACA,eAAegC,WAAf","sourcesContent":["import auth0 from 'auth0-js'\nimport callback from '../pages/callback'\nimport Cookies from 'js-cookie'\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n        domain: 'mannycortez.auth0.com',\n        clientID: 'EUjD13m9xe4NZ9RTApKLbjcgyn5KPlXm',\n        redirectUri: 'http://localhost:4000/callback',\n        responseType: 'token id_token',\n        scope: 'openid profile'\n    })\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise(( resolve, reject ) => {\n      this.auth0.parseHash(( err, authResult ) => {\n        if(authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err); \n          console.log(err);\n        }\n      });\n    })\n  }\n\n  setSession(authResult) {\n    // Sets the time that the Access Token will expire at\n    const expiresAt = JSON.stringify((authResult.expiresIn = 1000) + new Date().getTime());\n\n    // localStorage.setItem('access_token', authResult.accessToken);\n    Cookies.set('user', authResult.idTokenPayload);\n    Cookies.set('jwt', authResult.idToken);\n    Cookies.set('expiresAt', expiresAt);\n  }\n\n    logout() {\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n\n      this.auth0.logout( {\n        returnTo: '/',\n        clientID: 'EUjD13m9xe4NZ9RTApKLbjcgyn5KPlXm'\n      })\n    }\n    login() {\n        this.auth0.authorize();\n    }\n    isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiration time\n      const expiresAt = Cookies.getJSON('expiresAt');\n      return new Date().getTime() < expiresAt;\n    }\n}\n\nconst auth0Client = new Auth0();\nexport default auth0Client;"]},"metadata":{},"sourceType":"module"}